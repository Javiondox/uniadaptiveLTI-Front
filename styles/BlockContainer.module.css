.container {
	user-select: none;
}

.container svg,
.container div {
	pointer-events: none; /* So the right click to the SVG doesn't stop the propagation */
}

.container svg {
	height: 32px;
	width: 32px;
}

.container > span.blockInfo {
	width: 8em;
	display: -webkit-box;
	padding: 4px 10px;
	border-radius: 0.5rem;
	-webkit-line-clamp: 2;
	-webkit-box-orient: vertical;
	word-break: break-word;
	overflow: hidden;
	text-overflow: ellipsis;
	max-height: 4rem;
	position: absolute;
	text-align: center;
	color: var(--blockflow-label-font-color);
	font-family: var(--blockflow-label-font-family);
	background-color: var(--blockflow-label-background-color);
	pointer-events: none;
}

.nodeSelected {
	width: max-content;
	background-image: linear-gradient(90deg, white 50%, transparent 50%),
		linear-gradient(90deg, white 50%, transparent 50%),
		linear-gradient(0deg, white 50%, transparent 50%),
		linear-gradient(0deg, white 50%, transparent 50%);
	background-repeat: repeat-x, repeat-x, repeat-y, repeat-y;
	background-size: 15px 4px, 15px 4px, 4px 15px, 4px 15px;
	animation: border-dance 0.25s infinite linear;
}

.nodeSelectedNoAnimated::after {
	z-index: -1;
	content: " ";
	position: absolute;
	margin: auto;
	right: -50%;
	top: -50%;
	min-width: 8em;
	min-height: 8em;
	background-color: rgba(29, 29, 169, 0.5);
	border: 4px solid rgba(255, 165, 0, 0.5);
	border-radius: 100%;
}

@keyframes border-dance {
	0% {
		background-position: left top, right bottom, left bottom, right top;
	}
	100% {
		background-position: left 15px top, right 15px bottom, left bottom 15px,
			right top 15px;
	}
}

.container > span.blockInfo.top {
	top: -4.5em;
	right: -50%;
}

.container > span.blockInfo.bottom {
	bottom: -4em;
	right: -50%;
}

.hovedConditions {
	background: var(--blockflow-hover-background-color);
	color: var(--blockflow-hover-font-color);
	padding: 0.5rem 1rem;
	font-family: var(--blockflow-hover-font-family);
	border: var(--main-borders);
	position: absolute;
	left: calc(1rem + 68px);
	z-index: 10000 !important;
	word-break: keep-all;
	line-break: strict;
	min-width: 36em;
}

.badge {
	position: absolute;
	visibility: hidden;
	opacity: 0;
	color: black;
	transition: all 0.2s;
	transform: scaleY(0);
	pointer-events: none;
}

.badgeError {
	top: -6px;
	left: -12px;
	padding: 4px;
}

.badgeError svg {
	height: 16px;
	width: 16px;
}

/* MOODLE BLOCK BADGES */
.badgeConditions {
	top: -16px;
	width: 32px;
	left: auto;
	padding: 4px;
}

.badgeConditions svg {
	height: 16px;
	width: 16px;
}

.badgeVisibility {
	top: -6px;
	right: -12px;
	padding: 4px;
}

.badgeVisibility svg {
	height: 16px;
	width: 16px;
}

.badgeSection {
	bottom: -8px;
	left: 4px;
}

.badgePos {
	bottom: -8px;
	right: 4px;
}

/* SAKAI BLOCK BADGES START */
.badgeMessage {
	top: -6px;
	right: -12px;
	padding: 4px;
}

.badgeSakaiSection {
	bottom: -8px;
	left: -12px;
}

.badgeSakaiColumn {
	bottom: -8px;
	left: 20.5px;
	background-color: #e5b770 !important;
}

.badgeSakaiPos {
	bottom: -8px;
	right: -12px;
}

/* SAKAI BLOCK BADGES END */

.container:hover .badge,
.container:focus-visible ~ .badge,
.container.borderAnim ~ .badge {
	position: absolute;
	transform: scaleY(1);
	visibility: visible;
	opacity: 100%;
	filter: drop-shadow(0 0px 5px rgba(0, 0, 0, 0.65));
}

.badge.showBadges {
	position: absolute;
	transform: scaleY(1);
	visibility: visible;
	opacity: 100%;
	filter: drop-shadow(0 0px 5px rgba(0, 0, 0, 0.65));
}

.blockToolbar {
	display: flex;
	flex-direction: column;
}

.blockToolbar button {
	border-radius: 0;
	border: var(--main-borders);
}

/* Accesibility */

.badge.noAnimation {
	transition: none;
}

.badge.highContrast {
	filter: none;
	background-color: var(--high-contrast-accent-color2) !important;
	color: var(--high-contrast-accent-color1) !important;
	border: var(--high-contrast-details-border) !important;
}

@media screen and (prefers-reduced-motion: reduce) {
	.badge {
		transition: none;
	}
}
